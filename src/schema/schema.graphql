scalar Date

type Query {
  allEvents: [Event!]!
  getEventByYear(year: String!): Event
  allPeople: [People!]!
  allPeoplePaginated(input: PeoplePaginationInput!): PeoplePaginationResultPayload!
  findPeopleByName(name: String!): [People!]!
  allItemsPaginated(input: ItemsPaginationInput!): ItemsPaginationResultPayload!
  allItems: [Item!]!
  getItemsByEvent(year: Int!): [Item!]
  getItemByOrdinal(ordinal: Int!, eventId: String!): Item!
  getItemsByOwner(ownerId: String!): [Item!]!
  allTransactions: [Transaction!]!
  allTransactionsPaginated(input: TransactionPaginationInput!): TransactionPaginationResultPayload!
  getTransactionsByBuyer(name: String!): [Transaction!]!
  getTransactionsByEvent(eventId: String!): [Transaction!]!
  getTransactionsBuyersReport(eventId: String!): [TransactionPayload!]!
  getTotalsByEvent(eventId: String!): TotalAmountPayload!
  getActiveEvent: Event!
  getItemsCountDown(eventId: String!): ItemsCountDownPayload!
  getTotalItems(eventId: String!): TotalItemsPayload!
}

type Mutation {
  createEvent(input: CreateEventInput!): CreateEventPayload
  deleteEvent(id: String!): Event
  updateEvent(id: String!, input: UpdateEventInput!): Event
  createPeople(input: CreatePeopleInput!): CreatePeoplePayload
  updatePeople(id: String!, input: UpdatePeopleInput): People
  createItem(input: CreateItemInput!): CreateItemPayload
  updateItem(id: String!, input: UpdateItemInput!): Item
  createTransaction(input: CreateTransactionInput!): CreateTransactionPayload
  updateTransaction(id: String!, input: UpdateTransactionInput!): Transaction
  payTransaction(id: String!, input: PayTransactionInput!): Transaction
  login(input: LoginInput!): LoginPayload
}

input LoginInput {
  user: String!
  password: String!
}

type LoginPayload {
  user: String!
  token: String!
}

input CreateEventInput {
  name: String!
  description: String
  startDate: Date!
  endDate: Date!
}

input UpdateEventInput {
  name: String
  description: String
  startDate: Date
  endDate: Date
}

input CreateItemInput {
  eventId: String!
  description: String
  externalIdentifier: String
  ownerId: String!
}

input UpdateItemInput {
  eventId: String
  description: String
  externalIdentifier: String
  ownerId: String
  ordinal: Int
}

type Error {
  message: String!
  status: Int!
}

interface PayloadBase {
  error: Error
}

interface PaginationPayloadBase {
  totalCount: Int!
  offset: Int!
  limit: Int!
}

enum SortDirection {
  ASC
  DESC
}

input ItemsPaginationInput {
  eventId: String!
  filter: String
  offset: Int!
  limit: Int!
  sortColumn: String!
  sortDirection: SortDirection!
}

input PeoplePaginationInput {
  filter: String
  offset: Int!
  limit: Int!
  sortColumn: String!
  sortDirection: SortDirection!
}

input TransactionPaginationInput {
  filters: TransactionFilters
  offset: Int!
  limit: Int!
  sortColumn: String!
  sortDirection: SortDirection!
}

input TransactionFilters {
  eventId: String
  buyerId: String
  itemOrdinal: Int
  description: String
  amountFrom: Float
  amountTo: Float
  isDonated: Boolean
  isPayed: Boolean
  isLastBuyer: Boolean
  paymentMethod: PaymentMethods
  paymentReference: String
  paymentDateFrom: Date
  paymentDateTo: Date
}

input UpdatePeopleInput {
  name: String
  nickname: String
  phoneNumber: String
  externalIdentifier: String
  address: String
  isBanned: Boolean
  bannedDescription: String
}

input CreatePeopleInput {
  name: String!
  nickname: String
  phoneNumber: String
  externalIdentifier: String
  address: String!
  isBanned: Boolean
  bannedDescription: String
}

input CreateTransactionInput {
  eventId: String!
  itemId: String!
  buyerId: String!
  description: String
  amount: Float!
  isDonated: Boolean!
  isLastBuyer: Boolean!
}

input PayTransactionInput {
  paymentDate: Date
  paymentMethod: PaymentMethods
  paymentReference: String
}

input UpdateTransactionInput {
  eventId: String
  itemId: String
  buyerId: String
  description: String
  amount: Float
  paymentDate: Date
  isDonated: Boolean
  isLastBuyer: Boolean
}

type CreateEventPayload implements PayloadBase {
  data: Event
  error: Error
}

type CreatePeoplePayload implements PayloadBase {
  data: People
  error: Error
}

type CreateItemPayload implements PayloadBase {
  data: Item
  error: Error
}

type CreateTransactionPayload implements PayloadBase {
  data: Transaction
  error: Error
}

type ItemsPaginationResultPayload implements PaginationPayloadBase & PayloadBase {
  items: [Item!]
  error: Error
  totalCount: Int!
  offset: Int!
  limit: Int!
}

type PeoplePaginationResultPayload implements PaginationPayloadBase & PayloadBase {
  people: [People!]
  error: Error
  totalCount: Int!
  offset: Int!
  limit: Int!
}

type TransactionPaginationResultPayload implements PaginationPayloadBase & PayloadBase {
  transactions: [TransactionPayload!]
  error: Error
  totalCount: Int!
  offset: Int!
  limit: Int!
}

type TotalAmountPayload {
  total: Float!
}

type ItemsCountDownPayload {
  count: Int!
}

type TotalItemsPayload {
  count: Int!
}

interface Entity {
  id: ID!
  createdAt: Date
  updatedAt: Date
}

type Event implements Entity {
  id: ID!
  name: String!
  description: String
  startDate: Date
  endDate: Date
  createdAt: Date
  updatedAt: Date
}

type People implements Entity {
  id: ID!
  name: String!
  nickname: String
  phoneNumber: String
  externalIdentifier: String
  address: String!
  isBanned: Boolean!
  bannedDescription: String
  createdAt: Date
  updatedAt: Date
}

type Item implements Entity {
  id: ID!
  event: Event!
  ordinal: Int
  description: String
  externalIdentifier: String
  owner: People!
  createdAt: Date
  updatedAt: Date
}

type Transaction implements Entity {
  id: ID!
  event: Event!
  item: Item!
  buyer: People!
  description: String
  amount: Float!
  isDonated: Boolean!
  isPayed: Boolean!
  isLastBuyer: Boolean!
  paymentMethod: PaymentMethods
  paymentReference: String
  paymentDate: Date
  createdAt: Date
  updatedAt: Date
}

type TransactionPayload {
  id: ID!
  eventId: String
  eventName: String
  eventDate: Date
  itemOrdinal: Int
  ownerId: String
  ownerName: String
  ownerNickname: String
  buyerId: String
  buyerName: String
  buyerNickname: String
  description: String
  amount: Float!
  isDonated: Boolean!
  isPayed: Boolean!
  isLastBuyer: Boolean!
  paymentMethod: PaymentMethods
  paymentReference: String
  paymentDate: Date
  transactionCreatedAt: Date
}

enum PaymentMethods {
  CASH
  DEPOSIT
  MONEY_CHECK
}
