scalar Date

type Query {
  allEvents: [Event!]!
  getEventByYear(year: String!): Event
  allPersons: [Person!]!
  filterPersonByName(name: String!): [Person!]!
  allItems: [Item!]!
  getItemByOrdinal(ordinal: Int!, eventId: String!): Item!
  getItemsByOwner(ownerId: String!): [Item!]!
}

type Mutation {
  createEvent(input: CreateEventInput!): CreateEventPayload
  deleteEvent(id: String!): Event
  updateEvent(id: String!, input: UpdateEventInput!): Event
  createPerson(input: CreatePersonInput!): CreatePersonPayload
  updatePerson(id: String!, input: UpdatePersonInput): Person
  createItem(input: CreateItemInput!): CreateItemPayload
  updateItem(id: String!, input: UpdateItemInput!): Item
}

input CreateEventInput {
  name: String!
  description: String
  year: String!
}

input UpdateEventInput {
  name: String
  description: String
}

input CreateItemInput {
  eventId: String!
  description: String
  externalIdentifier: String
  ownerId: String!
}

input UpdateItemInput {
  eventId: String
  description: String
  externalIdentifier: String
  ownerId: String
  ordinal: Int
}

type Error {
  message: String!
  status: Int!
}

interface PayloadBase {
  error: Error
}

input UpdatePersonInput {
  name: String
  nickname: String
  phoneNumber: String
  externalIdentifier: String
  address: String
}

input CreatePersonInput {
  name: String!
  nickname: String
  phoneNumber: String
  externalIdentifier: String
  address: String!
}

type CreateEventPayload implements PayloadBase {
  data: Event
  error: Error
}

type CreatePersonPayload implements PayloadBase {
  data: Person
  error: Error
}

type CreateItemPayload implements PayloadBase {
  data: Item
  error: Error
}

interface Entity {
  id: ID!
}

type Event implements Entity {
  id: ID!
  name: String!
  event: Event!
  description: String
  dateCreated: Date!
}

type Person implements Entity {
  id: ID!
  name: String!
  nickname: String
  phoneNumber: String
  externalIdentifier: String
  address: String!
  dateCreated: Date!
}

type Item implements Entity {
  id: ID!
  event: Event!
  ordinal: Int!
  description: String
  externalIdentifier: String
  owner: Person!
  dateCreated: Date!
}

# type Transaction implements Entity {
#   id: ID!
#   event: Event!
#   item: Item!
#   buyer: Person!
#   amount: Float!
#   isDonated: Boolean!
#   isPayed: Boolean!
#   isLastBuyer: Boolean!
#   dateCreated: Date!
#   paymentMethod: PaymentMethods
#   paymentReference: String
#   paymentDate: Date
# }

# enum PaymentMethods {
#   CASH,
#   DEPOSIT,
#   MONEY_CHECK
# }
